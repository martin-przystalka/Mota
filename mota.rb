require 'fileutils'

def generate(module_name="Module")
  puts "creating module #{module_name}..."
  FileUtils.mkdir_p "#{module_name}"
  file_header = "//Generated by Mota"
  createViewController(file_header, module_name)
  createViewModel(file_header, module_name)
  createViewModelDelegate(file_header, module_name)
  createBuilder(file_header, module_name)
  createXib(module_name)
  createStyle(file_header, module_name)
  createPresentationItem(file_header, module_name)
  puts "success"
end

def createViewController(header, name)
  view_controller_name = "#{name}ViewController"
  view_model_name = "#{name}ViewModel"
  out_file = File.new("#{name}/#{view_controller_name}.swift", "w")
  out_file.puts("#{header}

import UIKit

final class #{view_controller_name}: UIViewController {
    var viewModel: #{view_model_name}?
}")
  out_file.close
end

def createViewModel(header, name)
  view_model_name = "#{name}ViewModel"
  view_model_delegate_name = "#{name}ViewModelDelegate"
  out_file = File.new("#{name}/#{view_model_name}.swift", "w")
  out_file.puts("#{header}

import Foundation

final class #{view_model_name} {
    weak var delegate: #{view_model_delegate_name}?
    var style: #{name}Style?
}")
end

def createViewModelDelegate(header, name)
  view_model_delegate_name = "#{name}ViewModelDelegate"
  out_file = File.new("#{name}/#{view_model_delegate_name}.swift", "w")
  out_file.puts("#{header}

import Foundation

protocol #{view_model_delegate_name}: class {

}")
end

def createBuilder(header, name)
  builder_name = "#{name}Builder"
  out_file = File.new("#{name}/#{builder_name}.swift", "w")
  out_file.puts("#{header}

import UIKit

final class #{builder_name} {

    func buildView() -> #{name}ViewController {
        let nib = UINib(nibName: \"#{name}ViewController\", bundle: nil)
        guard let viewController = nib.instantiate(withOwner: nil, options: nil).first as? #{name}ViewController else {
            fatalError(\"Expected to have view controller at this point\")
        }
        let viewModel = #{name}ViewModel()
        let style = #{name}Style()
        viewModel.style = style
        viewController.viewModel = viewModel
        return viewController
    }
}")
end

def createXib(name)
  xib_name = "#{name}ViewController"
  out_file = File.new("#{name}/#{xib_name}.xib", "w")
  out_file.puts("<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<document type=\"com.apple.InterfaceBuilder3.CocoaTouch.XIB\" version=\"3.0\" toolsVersion=\"14490.70\" targetRuntime=\"iOS.CocoaTouch\" propertyAccessControl=\"none\" useAutolayout=\"YES\" useTraitCollections=\"YES\" useSafeAreas=\"YES\" colorMatched=\"YES\">
    <device id=\"retina6_1\" orientation=\"portrait\">
        <adaptation id=\"fullscreen\"/>
    </device>
    <dependencies>
        <deployment identifier=\"iOS\"/>
        <plugIn identifier=\"com.apple.InterfaceBuilder.IBCocoaTouchPlugin\" version=\"14490.49\"/>
        <capability name=\"Safe area layout guides\" minToolsVersion=\"9.0\"/>
        <capability name=\"documents saved in the Xcode 8 format\" minToolsVersion=\"8.0\"/>
    </dependencies>
    <objects>
        <placeholder placeholderIdentifier=\"IBFilesOwner\" id=\"-1\" userLabel=\"File's Owner\"/>
        <placeholder placeholderIdentifier=\"IBFirstResponder\" id=\"-2\" customClass=\"UIResponder\"/>
        <viewController id=\"fn9-hw-EP2\" customClass=\"#{xib_name}\">
            <view key=\"view\" contentMode=\"scaleToFill\" id=\"wlc-aA-xGy\">
                <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"414\" height=\"896\"/>
                <autoresizingMask key=\"autoresizingMask\" widthSizable=\"YES\" heightSizable=\"YES\"/>
                <color key=\"backgroundColor\" white=\"0.0\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"/>
                <viewLayoutGuide key=\"safeArea\" id=\"pK1-JP-ki3\"/>
            </view>
        </viewController>
    </objects>
</document>")
end

def createStyle(header, name)
  style_name = "#{name}Style"
  out_file = File.new("#{name}/#{style_name}.swift", "w")
  out_file.puts("#{header}

import Foundation

struct #{style_name} {

}")
end

def createPresentationItem(header, name)
  presentation_item_name = "#{name}PresentationItem"
  out_file = File.new("#{name}/#{presentation_item_name}.swift", "w")
  out_file.puts("#{header}

import Foundation

struct #{presentation_item_name} {

}")
end

if ARGV.length > 0
  generate(ARGV[0])
end
